package com.lenwotion.travel.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lenwotion.travel.bean.reminder.ArriveReminderBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARRIVE_REMINDER_BEAN".
*/
public class ArriveReminderBeanDao extends AbstractDao<ArriveReminderBean, Long> {

    public static final String TABLENAME = "ARRIVE_REMINDER_BEAN";

    /**
     * Properties of entity ArriveReminderBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property StationId = new Property(2, int.class, "stationId", false, "STATION_ID");
        public final static Property StationName = new Property(3, String.class, "stationName", false, "STATION_NAME");
        public final static Property Lng = new Property(4, String.class, "lng", false, "LNG");
        public final static Property Lat = new Property(5, String.class, "lat", false, "LAT");
        public final static Property Direction = new Property(6, int.class, "direction", false, "DIRECTION");
        public final static Property WayType = new Property(7, int.class, "wayType", false, "WAY_TYPE");
        public final static Property IsRemind = new Property(8, boolean.class, "isRemind", false, "IS_REMIND");
        public final static Property IsArrive = new Property(9, boolean.class, "isArrive", false, "IS_ARRIVE");
    }


    public ArriveReminderBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ArriveReminderBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARRIVE_REMINDER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"STATION_ID\" INTEGER NOT NULL ," + // 2: stationId
                "\"STATION_NAME\" TEXT," + // 3: stationName
                "\"LNG\" TEXT," + // 4: lng
                "\"LAT\" TEXT," + // 5: lat
                "\"DIRECTION\" INTEGER NOT NULL ," + // 6: direction
                "\"WAY_TYPE\" INTEGER NOT NULL ," + // 7: wayType
                "\"IS_REMIND\" INTEGER NOT NULL ," + // 8: isRemind
                "\"IS_ARRIVE\" INTEGER NOT NULL );"); // 9: isArrive
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARRIVE_REMINDER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ArriveReminderBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getStationId());
 
        String stationName = entity.getStationName();
        if (stationName != null) {
            stmt.bindString(4, stationName);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(5, lng);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(6, lat);
        }
        stmt.bindLong(7, entity.getDirection());
        stmt.bindLong(8, entity.getWayType());
        stmt.bindLong(9, entity.getIsRemind() ? 1L: 0L);
        stmt.bindLong(10, entity.getIsArrive() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ArriveReminderBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getStationId());
 
        String stationName = entity.getStationName();
        if (stationName != null) {
            stmt.bindString(4, stationName);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(5, lng);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(6, lat);
        }
        stmt.bindLong(7, entity.getDirection());
        stmt.bindLong(8, entity.getWayType());
        stmt.bindLong(9, entity.getIsRemind() ? 1L: 0L);
        stmt.bindLong(10, entity.getIsArrive() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ArriveReminderBean readEntity(Cursor cursor, int offset) {
        ArriveReminderBean entity = new ArriveReminderBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.getInt(offset + 2), // stationId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // stationName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lng
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lat
            cursor.getInt(offset + 6), // direction
            cursor.getInt(offset + 7), // wayType
            cursor.getShort(offset + 8) != 0, // isRemind
            cursor.getShort(offset + 9) != 0 // isArrive
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ArriveReminderBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setStationId(cursor.getInt(offset + 2));
        entity.setStationName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLng(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLat(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDirection(cursor.getInt(offset + 6));
        entity.setWayType(cursor.getInt(offset + 7));
        entity.setIsRemind(cursor.getShort(offset + 8) != 0);
        entity.setIsArrive(cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ArriveReminderBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ArriveReminderBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ArriveReminderBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
